// /*
//  * a small mixin for easy use of rem with px as fallback
//  * usage: @include x-rem(font-size, 14px)
//  * usage: @include x-rem(marign, 0 12px 2 1.2)
//  * usage: @include x-rem(padding, 1.5 24px)
//  *
//  * thanks to Eric Meyer for https://github.com/ericam/susy
//  * and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/
//  */
@mixin x-rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 10px; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }
 
  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}


// ==========================================================================
// Fonts
// ========================================================================== 

@mixin font-size($value: $font-size-base) { 
  font-size: $value + px;
  font-size: ($value / 10) + rem;
}

@mixin font($font-stack: $font-base, $size: $font-size-base, $uppercase: false) {
  @include font-size($size);
  font-family: $font-stack;
  letter-spacing: 1px;
  @if ($uppercase) {
    text-transform: uppercase;
  }
}


// ==========================================================================
// Diamond figure
// ========================================================================== 

@mixin diamond($size: 8, $color: $color-base) {
  @include rotate(-45deg);
  @include transform-origin(0, 100%);
  content: "";
  width: $size + px; 
  height: $size + px;
  background-color: $color;
}


// ==========================================================================
// Transparent button
// ========================================================================== 

@mixin button-trans($bg-base: false, $bg-hover: $color-accent, $font-size: 20) {
  // Foundation vars
  $button-border-width: 3px;
  $button-border-style: solid;
  $button-function-factor: 0%;
  @include button($bg: $bg-hover);
  @include single-transition();
  @include font($size: $font-size, $uppercase: true);
  border-color: $color-base;
  color: $color-base;
  $bg-color: if($bg-base, $bg-base, transparent);
  background: $bg-color;
  &:hover {
    background-color: transparent;
    color: $color-accent;
  }
  &:active {
    @include single-transition(0s, all, ease-in);
    @include single-text-shadow(1px, 1px, 0px, false, rgba(255, 255, 255,.2));
    background-color: rgba(darken($bg-hover, 3%), 0.8);
    color: darken($bg-hover, 25%);
  }
}


// ==========================================================================
// Pseudo-class helper
// ========================================================================== 

@mixin pseudo($top: 0, $left: 0, $size: false, $width: false, $height: false, $position: absolute) {
  content: "";
  position: $position;
  top: $top;
  left: $left;

  @if $size {
    $size-w: if($width, $width, $size);
    $size-h: if($height, $height, $size);
    width: $size-w;
    height: $size-h;
  } @else {
    width: if($width, $width, 100%);
    height: if($height, $height, 100%);
  }
}  


// ==========================================================================
// Foundation grid mixin with all predefined 'grid-column' options support
// ==========================================================================

@mixin grid(
  // default variable declaration for 'grid' mixin
  $small, 
  $medium: false, 
  $large: false, 
  // declaring variables to provide support for all predefined 'grid-column' options
  $has-last-column: false, 
  $has-center: false,
  $has-s-offset: false, 
  $has-push: false, 
  $has-pull: false, 
  $has-collapse: false, 
  $has-float: true,
  $has-position: false,
  // if only has small
  $has-s-center: false,
  // if medium states varies
  $has-m-last-column: false, 
  $has-m-center: false,
  $has-m-offset: false, 
  $has-m-push: false, 
  $has-m-pull: false, 
  $has-m-collapse: false, 
  $has-m-float: false,
  $has-m-position: false,
  // if large states varies
  $has-l-last-column: false, 
  $has-l-center: false, 
  $has-l-offset: false, 
  $has-l-push: false, 
  $has-l-pull: false, 
  $has-l-collapse: false, 
  $has-l-float: false,
  $has-l-position: false) {

  // Mobile-first: $small-range: (0em, 40em); [0, 640px]
  @include grid-column(
    $small,
    // providing support for all predefined 'grid-column' options at small-up
    $last-column: $has-last-column, 
    $center: if($has-s-center, $has-s-center, $has-center), 
    $offset: $has-s-offset, 
    $push: $has-push, 
    $pull: $has-pull, 
    $collapse: $has-collapse, 
    $float: $has-float,
    $position: $has-position);

  // Medium size-up: $medium-range: (40.063em, 64em); [641px, 1024px]
  @if $medium {
    @media #{$medium-up} {
      @include grid-column(
        $medium,
        // providing support for all predefined 'grid-column' options at medium-up
        $last-column: if($has-m-last-column, $has-m-last-column, $has-last-column),
        $center: $has-m-center,
        $offset: if($has-m-offset, $has-m-offset, false), 
        $push: if($has-m-push, $has-m-push, $has-push), 
        $pull: if($has-m-pull, $has-m-pull, $has-pull), 
        $collapse: if($has-m-collapse, $has-m-collapse, $has-collapse),
        $float: if($has-m-float, $has-m-float, $has-float),
        $position: if($has-m-position, $has-m-position, $has-position)
        );
    }
  } // if has $medium argument

  // Large size-up: $large-range: (64.063em, 90em); [1025px, 1440px]
  @if $large {
    @media #{$large-up} {
      @include grid-column(
        $large,
        // providing support for all predefined 'grid-column' options at large-up
        $last-column: if($has-l-last-column, $has-l-last-column, $has-last-column),
        $center: $has-l-center,
        $offset: if($has-l-offset, $has-l-offset, false), 
        $push: if($has-l-push, $has-l-push, $has-push), 
        $pull: if($has-l-pull, $has-l-pull, $has-pull), 
        $collapse: if($has-l-collapse, $has-l-collapse, $has-collapse),
        $float: if($has-l-float, $has-l-float, $has-float),
        $position: if($has-l-position, $has-l-position, $has-position)
        );
    } 
  } // if has $large argument
}